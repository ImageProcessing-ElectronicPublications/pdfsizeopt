.TH "PdfSizeOpt" "1" "27 May 2019" "0.2019-05-27" "User Manual"

.SH NAME
\fBpdfsizeopt\fR

.SH DESCRIPTION
PdfSizeOpt - PDF file size optimizer.

.SH SYNOPSIS
\fBpdfsizeopt\fR [<flag>...] <input.pdf> [<output.pdf>]

.SH OPTIONS
.TP
\fB--optimize\fR
default mode
  Optimize a PDF: read it, make it smaller without quality loss, write the output PDF. This is the default mode of operation.
.TP
\fB--version\fR
Print pdfsizeopt version info and exit.
.TP
\fB--help\fR
Display help with all command-line flags.
.TP
\fB--helpshort\fR
Display help without command-line flags.
.TP
\fB--stats\fR
Display byte size statistics of various object types in a PDF.
.TP
\fB--v=\fRVERBOSITY
default: \fI190\fR
  Controls the verbosity of pdfsizeopt (and the tools invoked by it), i.e. how much pdfsizeopt writes to stderr. Please note that pdfsizeopt and never writes to stdout (and it also redirects the tool output from stdout to sterr).
  10: Fatal errors, unhandled exceptions.
  20: As above, plus errors.
  30: As above, plus warnings.
  40: As above, plus a constant number of info messages containing progress updates.
  50: As above, plus info messages proportional to the input file size.
  60: As above, plus tool output. (Example tools: Ghostscript, sam2p, imgdataopt, jbig2.)
  190: As above.
  200: As above, plus debug info.
  999: Everything.
.TP
\fB--quiet\fR
Equivalent to \fI--v=20\fR : print only errors, fatal errors, unhandled exceptions.
.TP
\fB--tmp-dir=\fRDIR
Directory to save temporary files to. pdfsizeopt will delete these files unless an uncaught exception is raised. If not specified or empty, then the environment variable TMPDIR will be used (TEMP on Windows) if it exists. If that's also missing, empty or it doesn't exist, then the directory containing the output file is used. (If running pdfsizeopt within Docker, only the default works.)

.SH FLAGS
.TP
\fB--do-optimize-images=\fRYES_NO
default: \fIyes\fR
  Do the image optimizations? If yes, this can be slow, because various internal compression algorithms and external image optimizer programs will be run on each image, and some of them are slow.
.TP
\fB--use-pngout=\fRYES_NO
default: \fIyes\fR
  Run pngout for optimizing images embedded in PDF? Please note that pngout is very slow. Needs the external optimizer tool pngout.
.TP
\fB--use-jbig2=\fRYES_NO
default: \fIyes\fR
  Run jbig2 for optimizing images embedded in PDF? Affects only images with 2 colors. Needs the external optimizer tool jbig2.
.TP
\fB--use-sam2p-pr=\fRYES_NO
default: \fIyes\fR
  Run sam2p with predictors enabled for optimizing images embedded in PDF? Needs external optimizer tool sam2p.
.TP
\fB--use-image-optimizer=\fRPROG[,...]
default: \fInone\fR
  Run the specified image optimizer programs (comma-separated list) for optimizing images embedded in PDF. Can be specified multiple times. If specified, the default because --use-pngout=no and --use-jbig2=no. Only some well-known, built-in PROG values can be specified (e.g. sam2p, imgdataopt, pngout, jbig2, zopflipng, optipng, ECT, advpng). Specifying the same program multiple times would run it multiple times, so don't do it. The special values no or none indicate that no program should be run (but more values can be appended later).
.TP
\fB--use-image-optimizer=\fRCMD_PATTERN
default: \fInone\fR
  Run the specified image optimizer program command-line for optimizing images embedded in PDF. This is in addition to the other values for the same flag. CMD_PATTERN is an os.system command-line pattern, which must contain at least one space, and %(targetfnq)s, to which the target filename would be substituted. Additionally, it may contain %(sourcefnqs) for the source filename. Both of them will be autogenerated temporary filenames. (There are some other sobstitutions as well in CMD_PATTERN.) The CMD_PATTERN can be used to run an image optimizer whose command-line syntax is not built in to pdfsizeopt.
.TP
\fB--do-fast-bilevel-images=\fRYES_NO
default: \fIno\fR
  Disable some slow image optimizers for bilevel images in favor of jbig2. This flag is smart, and it disables optimizers only if jbig2 is enabled, and the to-be-disabled optimizer is very unlikely to be better than jbig2.
.TP
\fB--do-require-image-optimizers=\fRYES_NO
default: \fIyes\fR
  Check for the existence of image optimizer programs, before reading the input PDF?
.TP
\fB--do-debug-image-optimizers=\fRYES_NO
default: \fIno\fR
  Print a list of image optimizer CMD_PATTERN values to be used, before reading the input PDF? This is useful for debugging. It also reveals the CMD_PATTERN of the well-known, built-in PROG values.
.TP
\fB--do-optimize-fonts=\fRYES_NO
default: \fIyes\fR
  Do the font optimizations? Most font optimizations apply to Type1 and Type1C (CFF) fonts only. There are no Type42 (TrueType) font optimizations.
.TP
\fB--do-unify-fonts=\fRYES_NO
default: \fIyes\fR
  Unify (merge) fonts with similar names, thereby removing glyph shape duplication? It only works with Type1 and Type1C fonts which are named as subsets of the same font. Many other restrictions also apply. It is careful and paranoid: if unification doesn't work for some fonts, it keeps them intact.
.TP
\fB--do-keep-font-optionals=\fRYES_NO
default: \fIno\fR
  Keep optional information about fonts in the PDF? The optional information is not needed for rendering and interactivity, it was needed by the document authoring system. Currently it applies only to the /CharSet field.
.TP
\fB--do-regenerate-all-fonts=\fRYES_NO
default: \fIyes\fR
  Parse and serialize all fonts? Currently it applies only to Type1 an Type1C fonts. It makes the output consistent, and it also makes some fonts a bit smaller. Doing it is not much slower (and it's actually faster if some fonts need /LZWDecode). However, Ghostscript is used for both parsing and serialization, and it may breaks some fonts (but it seldom happens nowadays).
  So in case of font problems, specify
  \fI--do-unify-fonts=no --do-regenerate-all-fonts=no\fR
.TP
\fB--do-double-check-type1c-output=\fRYES_NO
default: \fIno\fR
.TP
\fB--do-double-check-missing-glyphs=\fRYES_NO
(same as above, legacy flag name)
  After Type1C font serialization, parse it again, and check that the glyphs and most other fields are still there? It is slow, but it can reveal some bugs in Ghostscript.
.TP
\fB--do-optimize-streams=\fRYES_NO
default: \fIyes\fR
  Recompress all non-image streams, keep the smallest value. To optimize image streams, please use --do-optimize-images=yes.
.TP
\fB--do-optimize-objs=\fRYES_NO
default: \fIyes\fR
  Optimize all objects in a PDF in a generic way? It removes unused objects, it deduplicates objects, it reserialize object headers etc. These optimizations don't depend on the object type.
.TP
\fB--do-optimize-obj-heads=\fRYES_NO
default: \fIyes\fR
  Reserialize object headers? Only relevant if --do-optimize-obs=no (otherwise it's enabled regardless of the flag). It removes unnecessary whitespace and comments.
.TP
\fB--do-ignore-generation-numbers=\fRYES_NO
default: \fIyes\fR
  Ignore generation numbers in object definitions and references? If yes, it treats all generation numbers as 0. If no, it aborts on nonzero generation numbers.
.TP
\fB--do-remove-generational-objs=\fRYES_NO
default: \fIyes\fR
  Remove or renumber generational objects, making all objects in the output PDF non-generational? Currently this is not implemented properly, it just turns on the same optimizations as --do-optimize-objs=yes, and these are not related to generational object renumbering.
.TP
\fB--do-unify-pages=\fRYES_NO
default: \fIyes\fR
  Unify duplicate /Type /Page objects? It makes the PDF with duplicate pages a bit smaller. Disabling it increases compatibility with some old PDF viewers.
.TP
\fB--do-generate-xref-stream=\fRYES_NO
default: \fIyes\fR
  Generate the output PDF file with an xref stream (rather than an xref)? It produces smaller output. It should only be turned off for debugging.
.TP
\fB--do-generate-object-stream=\fRYES_NO
default: \fIyes\fR
  Generate the output PDF file with non-stream objects packed to an object stream (objstm)?
  It produces smaller output. It should only be turned off for debugging.
.TP
\fB--do-decompress-flate=\fRYES_NO
default: \fIno\fR
  Decompress all /Filter /FlateEncode streams in the output PDF? Doing so can make the output PDf much larger, so it should be enabled only for debugging, like this:
  \fI--do-decompress-flate=yes --do-compress-uncompressed-streams=no\fR
.TP
\fB--do-decompress-most-streams=\fRYES_NO
default: \fIno\fR
  Decompress most compressed streams in the output PDF? Doing so can make the output PDf much larger, so it should be enabled only for debugging, like this:
  \fI--do-decompress-most-streams=yes --do-compress-uncompressed-streams=no\fR
  Actually not all streams are decompressed, but only those which eventually get used in the output PDF, except if they have filter /DCTDecode or /JPXDecode (because such decompression is not deterministic and fully accurate).
.TP
\fB--do-compress-uncompressed-streams=\fRYES_NO
default: \fIyes\fR
  Compress stream objects in the output which are uncompressed? This is applied after the decompressions by the \fI--do-decompres-...\fR flags.
.TP
\fB--use-multivalent=\fRYES_NO
default: \fIno\fR
  Use the tool.pdf.Compress tool in Multivalent.jar to optimize the PDF even further, after applying the optimizations built in to pdfsizeopt? Not enabled by default, because it needs a copy of Multivalent.jar, which is not available for download or buying anymore.
.TP
\fB--do-escape-images-from-multivalent=\fRYES_NO
default: \fIyes\fR
  Hide images from Multivalent.jar, making it skip all image optimizations?
  It's useful to enable it by default, because Multivalent has some image processing bugs (including some compression predictor handling), thus it would garble the image with a /Predictor.
.TP
\fB--do-debug-gs=\fRYES_NO
default: \fIno\fR
  Display debug info about where pdfsizeopt is trying to find Ghostscript, whether the found Ghostscripts work, and which one was chosen? All this before reading the first input PDF.

.SH EXAMPLE
\fBpdfsizeopt\fR sample.pdf

.SH COPYRIGHT
Copyright 2007 Péter Szabó.
 All rights reserved.

.SH SEE ALSO
 pdfinfo(1), pngout(1), jpdftweak(1).

.SH CONTACTS
 Autors: Péter Szabó (https://github.com/pts)
 Homepage: https://github.com/pts/pdfsizeopt
